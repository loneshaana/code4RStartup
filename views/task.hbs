<div>
    <div class="row">
        <div class="col-md-8" style="border: 2px solid green; ">
            {{!-- instead of displaying markdown text, we will display content from the data base on the code editor
            --}}
            <textarea id="code-screen">{{content}}</textarea>
        </div>
        <div class="col-md-4" id="chatbox">
            <!-- VIDEO CALL -->

            <div id="video-container">
                <div style="display:inline-flex;">
                    <div>
                        <video autoplay id="second-video"></video>
                        <button id="mute-btn">
                            <span id="mute-icon">ðŸ”‡</span>
                        </button>
                    </div>

                    <div>
                        <video autoplay id="my-video" muted="true"></video>
                        <button id="snd-mute-btn">
                            <span id="snd-mute-icon">ðŸ”‡</span>
                        </button>
                    </div>
                </div>
                <div id="step2">
                    <p>Your ID: <span id="my-id">...</span></p>
                    <div class="form-online">
                        <input type="text" class="form-control" placeholder="Call User Id" id="callTo-id">
                        <a href="#" class="btn btn-sm btn-success" id="make-call">Call</a>
                    </div>
                </div>
                <div id="step3">
                    <p>Talk to <span id="second-id">...</span></p>
                    <a href="#" class="btn btn-sm btn-danger" id="end-call">End call</a>

                </div>
            </div>

            <!-- Chat Room -->
            <div class="panel panel-primary">
                <div class="panel-heading">
                    CHAT ROOM
                    <span class="pull-right" id="chatbox-username">
                        {{#if user}}
                        {{user.name}}
                        {{/if}}
                    </span>
                </div>
                <div class="panel-body">
                    <ul class="media-list" style="height: 300px; overflow-y: scroll;" id="chatbox-listMessages">
                        <!-- Messages will be appended here -->
                    </ul>
                </div>
                <div class="panel-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter Message" id="userMessage" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-primary" onclick="sendMessage()">Send</button>
                        </span>
                    </div>
                </div>
            </div>

            <div>
                <div class="panel-heading">
                    Connected Users
                    <div id="user-list-container">
                        <!-- Users will be appended here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" value="{{roomId}}" id="roomId" />

<!-- Include CodeMirror -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/mode/javascript/javascript.min.js"></script>

<script src="/plugins/ot/ot.js"></script>
<!-- Include Socket.IO Client -->
<script src="/socket.io/socket.io.js"></script> <!-- Corrected Path for Socket.IO client -->
{{!--
<script src="http://cdn.peerjs.com/0.3/peer.js"></script> --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.18/peer.js"></script>

{{!--
<script src="/plugins/lib/peer.js"></script> --}}

<script>
    const taskOwner = "{{taskOwner}}";
    console.log("Task Owner", taskOwner);
    const videoPlayer = document.getElementById("my-video");
    const muteButton = document.getElementById("snd-mute-btn");
    const muteIcon = document.getElementById("snd-mute-icon");

    muteButton.addEventListener("click", () => {
        if (videoPlayer.muted) {
            videoPlayer.muted = false;
            muteIcon.textContent = "ðŸ”Š"; // Speaker icon
        } else {
            videoPlayer.muted = true;
            muteIcon.textContent = "ðŸ”‡"; // Muted icon
        }
    });

    const secondvideoPlayer = document.getElementById("second-video");
    const secondmuteButton = document.getElementById("mute-btn");
    const secondmuteIcon = document.getElementById("mute-icon");

    secondmuteButton.addEventListener("click", () => {
        if (secondvideoPlayer.muted) {
            secondvideoPlayer.muted = false;
            secondmuteIcon.textContent = "ðŸ”Š"; // Speaker icon
        } else {
            secondvideoPlayer.muted = true;
            secondmuteIcon.textContent = "ðŸ”‡"; // Muted icon
        }
    });

</script>

<script>
    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;
    // Connect to the Socket.IO server
    var options = {
        reconnection: true,            // Enables auto-reconnection
        reconnectionAttempts: 10,      // Max attempts to reconnect
        reconnectionDelay: 1000,       // Initial delay between attempts (ms)
        reconnectionDelayMax: 5000,    // Max delay between attempts (ms)
        timeout: 20000                 // Connection timeout before an error (ms)
    }
    
    var socket = io.connect('https://codeshare.azurewebsites.net',options)
    // var socket = io.connect('http://localhost:3000', options);

    // Initialize the CodeMirroreditor
    var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
        lineNumbers: true,
        // mode: "javascript",
        theme: "monokai"
    });


    var code = $('#code-screen').val();
    var cmClient;
    function init(str, revision, clients, serverAdapter) {
        if (!code) { // if we do not have any updated code, then set the default string value
            editor.setValue(str)
        }
        cmClient = window.cmClient = new EditorClient(
            revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        )
    }
    socket.on('doc', function (obj) {
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket))
    })

    socket.on("disconnect", function () {
        alert("Disconnected from the server! Please try again.")
    })
    // Generate or fetch the username
    var username = $('#chatbox-username').text().trim();
    if (username === "") {
        var userId = Math.floor(Math.random() * 9999).toString();
        username = "User" + userId;
        $("#chatbox-username").text(username);
    }
    var roomId = $('#roomId').val();
    //if (roomId) {
    socket.emit('joinRoom', { room: roomId, username: username })

    socket.on("ping", function (data) {
        socket.emit("pong", { room: roomId, username: username })
    })

    // Function to create message HTML structure
    var userMessage = function (name, text) {
        return (
            '<li class="media"> <div class="media-body"> <div class="media">' +
            '<div class="media-body" ' +
            '<b>' + name + '</b>: ' + text +
            '<hr/> </div></div></div></li>'
        );
    };

    // Function to send message to server
    function sendMessage() {
        console.log("SendMessage called")
        var userMessageText = $('#userMessage').val();
        if (userMessageText.trim() !== "") {
            console.log("Sending message", userMessageText)
            socket.emit('chatMessage', { message: userMessageText, username: username });
            $('#userMessage').val(""); // Clear input field
        } else {
            console.warn('Message is empty, not sending it')
        }
    };

    // Listen for 'chatMessage' events from the server and display messages
    socket.on('chatMessage', function (data) {
        $('#chatbox-listMessages').append(userMessage(data.username, data.message));
        $('#chatbox-listMessages').scrollTop($('#chatbox-listMessages')[0].scrollHeight); // Scroll to bottom
    });

    socket.on('ConnectedUsers', function (data) {
        var keys = Object.values(data);
        var users = keys.map(key => key.name);
        console.log("Connected Users", users);
        // Target the container div
        var containerDiv = document.getElementById("user-list-container");

        // Clear previous list (if any)
        containerDiv.innerHTML = "";

        // Create a new UL element
        var ul = document.createElement("ul");

        // Add each user as an LI
        users.forEach(user => {
            var li = document.createElement("li");
            li.textContent = user;
            ul.appendChild(li);
        });

        // Append the UL to the container DIV
        containerDiv.appendChild(ul);
    })

    // handle disconnections
    //  socket.on('disconnect', function () {
    //    alert('Disconnected from the server! Please try again.')
    // }) 

    // PeerJS
    // Compatibility shim
    // BELOW LINE OF CODE WILL DISPLAY THE CAMERA
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // PeerJS object
    var peer = new Peer(username, { key: '12345' });
    console.log("Peer id is:", peer.id)

    peer.on('open', function () {
        $('#my-id').text(peer.id);
    });
    // Navigator object is part of the Web APIs and provides information about the web browser and the user's envirnonment. 
    // It acts as an interface to access browser-specific information and perform certain actions related to the browser

    // Receiving a <call></call>
    peer.on('call', function (call) {
        // Answer the call automatically (instead of prompting user) for demo purposes
        alert("Call Receiving")
        call.answer(window.localStream);
        step3(call);
    });

    peer.on('error', function (err) {
        if (err == undefined || err.type === 'disconnected' || err.type === 'network') {
            if (peer.disconnected) {
                console.log("Peer Connection Reconnecting...", err);
                peer.reconnect();
            }
        } else {
            alert("Peer Connection Disconnected ", err);
            step2();
        }
        // Return to step 2 if error occurs
    });

    // Click handlers setup
    $(function () {
        $('#make-call').click(function () {
            // Initiate a call!
            var otherUserId = $('#callTo-id').val();
            var call = peer.call(otherUserId, window.localStream);
            step3(call);
        });
        $('#end-call').click(function () {
            window.existingCall.close();
            step2();
        });
        step1();
    });

    function step1() {
        // Get audio/video stream
        navigator.getUserMedia({ audio: true, video: true }, function (stream) {
            // Set your video displays
            $('#my-video').prop('src', URL.createObjectURL(stream));
            window.localStream = stream;
            step2();  // hides step1 and step2, and shows step2
        }, function (error) {
            console.log('Failed to get media stream', error)
            $('#step1-error').show();
        });
    }

    function step2() {
        $('#step1, #step3').hide();
        $('#step2').show();
    }

    function step3(call) {
        // Hang up on an existing call if present
        if (window.existingCall) {
            window.existingCall.close();
        }
        if (call) { // check if 'call' is defined before accessing its properties
            console.log(" waiting for other user stream.")
            call.on('stream', function (stream) {
                $('#second-video').prop('src', URL.createObjectURL(stream));
            });

            // Wait for stream on the call, then set peer video display

            // UI stuff
            window.existingCall = call;
            $('#second-id').text(call.peer);
            call.on('close', step2);
            $('#step1, #step2').hide();
            $('#step3').show();
        }
        else {
            console.log('Call object is undefined')
        }
    }


    function submitCode() {
        //get the screen code 
        var screenCode = document.getElementsByClassName(" CodeMirror-line ");
        var code = "";
        for (var i = 0; i < screenCode.length; i++) {
            code = code + screenCode[i].innerText + "\n";
        }
        console.log(code);

        //get the languge you choose
        var language = document.getElementById("language-code");
        var language_choose = language.options[language.selectedIndex].value;
        console.log(language_choose)

        axios.post('https://api.jdoodle.com/v1/execute/', {
            //   headers: {
            // 	  'Access-Control-Allow-Origin': '*',
            // 	   'Accept': 'application/json',
            //     'Content-Type': 'application/json',
            // 	},
            "clientId": "your-client-id",
            "clientSecret": "your-client-secret",
            "script": `${code}`,
            "language": `${language_choose}`,
            "versionIndex": "0"

            // "clientId": "b540e49e52dd53095ae926aecd9ffda0", "clientSecret": "19a95448b1b116e933bc1270382c2d8334f439cc77a2c00673bc6bd9159c6362", "script": `${code}`, "language": `${language_choose}`, "versionIndex": "0"
        })
            .then(function (response) {
                // console.log(JSON.stringify(response));
                const result = response.data.output;
                console.log(result);

                document.getElementById("result-submit").innerText = ` complied : \n ${result}`;
            })
            .catch(function (error) {
                console.log("Error submitting code", error);
                document.getElementById('result-submit').innerText = "Error occured while executing code"
            });


    }

</script>